<!--I gave up trying to load a textured cube-->
<canvas id=c width=900 height=900/>
<script>
Z={} 
Z.g=document.all.c.getContext('webgl')
Z.cls=function(r,g,b,a){
    var g=Z.g
    g.clearColor(r||0,g||0,b||0,a||1)
    //g.clearDepth(1) //Z.g.clear(16384) difference?
    //g.enable(2929)
    //g.depthFunc(515)
}

//load a json mesh 
Z.ld=function(c){
    for(i in c.m){  //for all materials in mesh
        var g=Z.g,v,t,n,p,b,x,img,s;
        p=g.createProgram()
        s=g.createShader(35633)
        g.shaderSource(s,c.m[i].v)
        g.compileShader(s)
        g.attachShader(p,s)
        s=g.createShader(35632)
        g.shaderSource(s,c.m[i].f)
        g.compileShader(s)
        g.attachShader(p,s)
        g.linkProgram(p)

        c.m[i].ds=g.getUniformLocation(p,'uDiffuseSampler')
        c.m[i].mx=g.getUniformLocation(p,'uMMatrix');
        c.m[i].px=g.getUniformLocation(p,'uPMatrix');
        c.m[i].vx=g.getUniformLocation(p,'uVMatrix');

        //g.useProgram(p)
        c.m[i].p=p;
        c.m[i].bv=g.createBuffer()
        g.bindBuffer(g.ARRAY_BUFFER,c.m[i].bv)
        g.bufferData(g.ARRAY_BUFFER,new Float32Array(c.v),g.STATIC_DRAW)
        c.m[i].bi=g.createBuffer()
        g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,c.m[i].bi)
        g.bufferData(g.ELEMENT_ARRAY_BUFFER,new Uint16Array(c.i),g.STATIC_DRAW)
        if (c.n) {
            c.m[i].bn = g.createBuffer()
            g.bindBuffer(g.ARRAY_BUFFER,c.m[i].bn)
            g.bufferData(g.ARRAY_BUFFER,new Float32Array(c.n),g.STATIC_DRAW)
        }
        if (c.t) {
            c.m[i].bt = g.createBuffer()
            g.bindBuffer(g.ARRAY_BUFFER,c.m[i].bt)
            g.bufferData(g.ARRAY_BUFFER,new Float32Array(c.t),g.STATIC_DRAW)
        }
        x = g.createTexture();
        img = new Image();
        img.onload = function() {
            g.bindTexture(g.TEXTURE_2D,x)
            g.pixelStorei(g.UNPACK_FLIP_Y_WEBGL,true)
            g.texImage2D(g.TEXTURE_2D,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,img)
            g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,g.LINEAR)
            g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,g.LINEAR)
            g.generateMipmap(g.TEXTURE_2D)
            g.bindTexture(g.TEXTURE_2D, null)
            c.m[i].x=x
            Z.drw(c,i)
        };
        img.src = c.m[i].td;
    }
}

Z.drw=function(c,i){
    var g=Z.g,p=c.m[i].p
    g.useProgram(p)
    g.enableVertexAttribArray(c.v)
    g.bindBuffer(g.ELEMENT_ARRAY_BUFFER, c.m[i].bi)
    g.bindBuffer(g.ARRAY_BUFFER, c.m[i].bv)
    g.vertexAttribPointer(c.v, 3, g.FLOAT, false, 0, 0)
    if (c.n) {
        g.enableVertexAttribArray(c.n)
        g.bindBuffer(g.ARRAY_BUFFER, c.m[i].bn)
        g.vertexAttribPointer(c.n, 3, g.FLOAT, false, 0, 0)
    }
    if (c.t) {
        g.enableVertexAttribArray(c.t)
        g.bindBuffer(g.ARRAY_BUFFER, c.m[i].bt)
        g.vertexAttribPointer(c.t, 2, g.FLOAT, false, 0, 0)
    }

    if (c.m[i].td) {
        g.activeTexture(g.TEXTURE0);
        g.bindTexture(g.TEXTURE_2D, c.m[i].x);
        g.uniform1i(c.m[i].ds, 0);
    }
    //if (c.m[i].te) {
    //    g.activeTexture(g.TEXTURE1);
    //    g.bindTexture(g.TEXTURE_2D, program.emissiveTexture);
    //    g.uniform1i(program.uEmissiveSampler, 1);
    //}

    g.uniformMatrix4fv(c.m[i].mx, false, Z.mM.d);
    g.uniformMatrix4fv(c.m[i].px, false, Z.pM.d);
    g.uniformMatrix4fv(c.m[i].vx, false, Z.vM.d);

    g.drawElements(g.TRIANGLES, 36, g.UNSIGNED_SHORT, 0);

}

//4x3 matrix
Z.M43 = function(){
    //var t=this
    this.d=new Float32Array(16)
    this.d[0]=1
    this.d[5]=1
    this.d[10]=1
    this.d[15]=1
}
Z.M43.prototype={
    mk:function(x1,x2,x3,y1,y2,y3,z1,z2,z3,t1,t2,t3) {
        this.d[0]=x1
        this.d[1]=x2
        this.d[2]=x3
        this.d[4]=y1
        this.d[5]=y2
        this.d[6]=y3
        this.d[8]=z1
        this.d[9]=z2
        this.d[10]=z3
        this.d[12]=t1
        this.d[13]=t2
        this.d[14]=t3
        return this
    },
    prsp:function(f,a,n,f)
    {
        var y1 = n*Math.tan(f*Math.PI/360), y0=-y1, x0=y0*a, x1=y1*a, 
            X=2*n/(x1-x0), Y=2*n/(y1-y0), 
            A=(x1+x0)/(x1-x0), B=(y1+y0)/(y1-y0), C=-(f+n)/(f-n), D=-2*f*n/(f-n);
        this.mk(X,0,0,0, 0,Y,0,0, A,B,C,-1, 0,0,D,0)
        return this
    }
}
Z.mM=new Z.M43()
Z.pM=new Z.M43()
Z.pM.prsp(45,1,.01,100)
Z.vM=new Z.M43()

Z.txt=function(obj){return obj.toString().match(/[^]*\/\*([^]*)\*\/\}$/)[1]}


var v = Z.txt(function(){/*
attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec2 aVertexTextureCoord;
uniform mat4 uMMatrix;
uniform mat4 uPMatrix;
uniform mat4 uVMatrix;
varying vec4 vWorldSpaceNormal;
varying vec2 vVertexTextureCoord;
void main() {
    gl_Position = uPMatrix * uVMatrix * uMMatrix * vec4(aVertexPosition, 1.0);
    vWorldSpaceNormal = uMMatrix * vec4(aVertexNormal, 0.0);
    vVertexTextureCoord = aVertexTextureCoord;
}
*/})

var f = Z.txt(function(){/*
precision mediump float;
varying vec4 vWorldSpaceNormal;
varying vec2 vVertexTextureCoord;
uniform sampler2D uDiffuseSampler;
uniform sampler2D uEmissiveSampler;
void main() {
    float diff = dot(vec3(0,0,1), vWorldSpaceNormal.xyz);
    vec4 color = texture2D(uDiffuseSampler, vVertexTextureCoord);
    vec4 emissive = texture2D(uEmissiveSampler, vVertexTextureCoord);
    gl_FragColor = vec4(max(color.rgb * diff, emissive.rgb), 1);
}
*/})
var cube={
  m : [ {v : v, f : f, td : "textures/mech-diffuse.jpg", te : "textures/mech-emissive.jpg" } ],
  i : [0, 1, 2, 2, 1, 3, 4, 5, 6, 6, 5, 7, 8, 9, 10, 10, 9, 11, 12, 13, 14, 14, 13, 15, 16, 17, 18, 18, 17, 19, 20, 21, 22, 22, 21, 23],
  v : [-0.5, -0.5, 0.5, 0.5, -0.5, 0.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, -0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5, 0.5],
  n : [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0],
  t : [0, -3, 1, -3, 0, -2, 1, -2, 0, -2, 1, -2, 0, -1, 1, -1, 0, -1, 1, -1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, -3, 2, -3, 1, -2, 2, -2, -1, -3, 0, -3, -1, -2, 0, -2]
}

Z.cls()
Z.ld(cube)


</script>
